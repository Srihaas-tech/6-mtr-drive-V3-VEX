{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\n// AI Classification Competition Element IDs\nenum gameElements {\n  mobileGoal,\n  redRing,\n  blueRing,\n};\n\ndigital_out pn = digital_out(Brain.ThreeWirePort.H);\n// AI Vision Color Descriptions\naivision::colordesc eyes__bring(1, 70, 154, 198, 10, 0.2);\naivision::colordesc eyes__rring(2, 230, 78, 122, 10, 0.2);\naivision::colordesc eyes__mogo(3, 160, 182, 115, 10, 0.2);\n// AI Vision Code Descriptions\naivision::codedesc eyes__ccode(1, eyes__bring, eyes__rring, eyes__mogo);\nvex::aivision eyes(PORT7, eyes__bring, eyes__rring, eyes__mogo, eyes__ccode, aivision::ALL_AIOBJS);\n\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  int systemTime = Brain.Timer.systemHighResolution();\n  double batteryCurrent = Brain.Battery.current();\n  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);\n\n  // Combine these values into a single integer\n  int seed = int(batteryVoltage + batteryCurrent * 100) + systemTime;\n\n  // Set the seed\n  srand(seed);\n}\n\n\n\nvoid vexcodeInit() {\n\n  //Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// ----------------------------------------------------------------------------\n//                                                                            \n//    Project:  R- and +                                             \n//    Author: 8025B\n//    Created:1/25/25\n//    Configuration: Competition Template       \n//                                                                            \n// ----------------------------------------------------------------------------\n\n// Include the V5 Library\n#include \"vex.h\"\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nmotor lf = motor(PORT13, ratio6_1, true);\nmotor lb = motor(PORT10, ratio6_1, true);\nmotor lt = motor(PORT8, ratio6_1, false);\nmotor_group leftmtrs(lf,lb);\nmotor rb = motor(PORT18, ratio6_1, false);\nmotor rf = motor(PORT17, ratio6_1, false);\nmotor rt = motor(PORT16, ratio6_1, true);\nmotor_group rightmtrs(rf,rb);\ndrivetrain Drivetrain = drivetrain(leftmtrs, rightmtrs, 299.24, 295, 40, mm, 0.6);\nmotor_group r = motor_group(lt, lb,lf);\nmotor_group l = motor_group(rt, rb,rf);\nmotor hook = motor(PORT9, ratio6_1);\nmotor intake1 = motor(PORT19, ratio18_1);\nmotor intake2 = motor(PORT15, ratio18_1,false);\ncontroller Controller1 = controller();\n\n\nvoid BX(){\n  pn.set(false);\n}\nvoid BB(){\n  pn.set(true);\n}\nvoid R1(){\n  hook.spin(forward);\n}\nvoid R2(){\n  hook.spin(reverse);\n}\nvoid L1(){\n  intake1.spin(forward);\n  intake2.spin(reverse);\n}\nvoid L2(){\n  intake1.spin(reverse);\n  intake2.spin(forward);\n}\nvoid stopintake(){\n  intake1.stop();\n  intake2.stop();\n}\nvoid stophook(){\n  hook.stop();\n}\n\n// Begin project code\n\nvoid preAutonomous(void) {\nvexcodeInit();\n  Drivetrain.setDriveVelocity(80,percent);\n  Drivetrain.setTurnVelocity(100,percent);\n  hook.setVelocity(50, percent);\n  hook.setMaxTorque(100,percent);\n  intake1.setVelocity(100, percent);\n  intake2.setVelocity(100, percent);\n  pn.set(false);\n  Controller1.ButtonX.pressed(BX);\n  Controller1.ButtonB.pressed(BB);\n  Controller1.ButtonR1.pressed(R1);\n  Controller1.ButtonR2.pressed(R2);\n  Controller1.ButtonL1.pressed(L1);\n  Controller1.ButtonL2.pressed(L2);\n Controller1.ButtonL1.released(stophook);\n Controller1.ButtonL2.released(stophook);\n Controller1.ButtonR1.released(stopintake);\n Controller1.ButtonR2.released(stopintake);\n while(1){\n    l.spin(forward,(Controller1.Axis3.position(percent) - Controller1.Axis1.position(percent))*12/100, volt);\n    r.spin(forward,(Controller1.Axis3.position(percent) + Controller1.Axis1.position(percent))*12/100, volt);\n    wait(20, msec);\n }\n\n  \n}\n\nvoid autonomous(void) {\nDrivetrain.setDriveVelocity(100, percent);\nleftmtrs.setVelocity(100,percent);\nrightmtrs.setVelocity(100,percent);\n  Drivetrain.setTurnVelocity(100,percent);\n  hook.setVelocity(55,percent);\n  pn.set(true);\n  intake1.spin(reverse);\n  intake2.spin(reverse);\n  //Going for MoGO\n  leftmtrs.spin(reverse);\n  rightmtrs.spin(reverse);\n  wait(1.1,seconds);\n  pn.set(false);\n  //Clamps\n  wait(0.30,seconds);\nl.stop();\n  rightmtrs.stop();\n\n  //Stops with the MoGo\n  //Turns\nleftmtrs.spin(forward);\n  rightmtrs.spin(reverse);\n  wait(0.65,seconds);\nleftmtrs.stop();\n  rightmtrs.stop();\n  //Goes for 1st donut\n  hook.spin(forward);\n  intake1.spin(reverse);\n  intake2.spin(reverse);\nleftmtrs.spin(forward);\n  rightmtrs.spin(forward);\n\n  wait(1.5,seconds);\nleftmtrs.stop();\n  rightmtrs.stop();\n\n  //Goes to ladder\nleftmtrs.spin(forward);\n  rightmtrs.spin(reverse);\n\n  wait(1.6,seconds);\nleftmtrs.stop();\n  rightmtrs.stop();\n  \n  Drivetrain.driveFor(forward,55,inches);\n  hook.stop();\n  intake1.stop();\n  intake2.stop();\n  //Done*/\n\n  wait(5, msec);\n}\n\nvoid userControl(void) {\n  Brain.Screen.clearScreen();\n  // place driver control in this while loop\n  while (true) {\n    wait(20, msec);\n  }\n}\n\nint main() {\n  // Initializing Robot Configuration. DO NOT REMOVE!\n  vexcodeInit();\n  // create competition instance\n  competition Competition;\n\n  // Set up callbacks for autonomous and driver control periods.\n  Competition.autonomous(autonomous);\n  Competition.drivercontrol(userControl);\n\n  \n  // Run the pre-autonomous function.\n  preAutonomous();\n\n  // Prevent main from exiting with an infinite loop.\n  while (true) {\n    wait(100, msec);\n  }\n}","textLanguage":"cpp","robotConfig":[{"port":[8],"name":"pn","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{},"triportSourcePort":22},{"port":[7],"name":"eyes","customName":true,"deviceType":"AIVision","deviceClass":"aivision","setting":{"config":"{\"colors\":[{\"id\":1,\"name\":\"bring\",\"nameValid\":\"Valid\",\"lastValidName\":\"bring\",\"red\":70.453125,\"green\":153.5390625,\"blue\":197.88802083333334,\"hueRange\":10,\"saturationRange\":0.2},{\"id\":2,\"name\":\"rring\",\"nameValid\":\"Valid\",\"lastValidName\":\"rring\",\"red\":229.5332512315271,\"green\":78.49753694581281,\"blue\":121.7493842364532,\"hueRange\":10,\"saturationRange\":0.2},{\"id\":3,\"name\":\"mogo\",\"nameValid\":\"Valid\",\"lastValidName\":\"mogo\",\"red\":160.1474867724868,\"green\":182.34920634920636,\"blue\":114.98412698412699,\"hueRange\":10,\"saturationRange\":0.2}],\"codes\":[{\"id\":1,\"name\":\"ccode\",\"color1\":1,\"color2\":2,\"color3\":3}],\"tags\":false,\"AIObjects\":true,\"AIObjectModel\":[\"Ball(Blue)\",\"Ball(Green)\",\"Ball(Red)\",\"Ring(Blue)\",\"Ring(Green)\",\"Ring(Red)\",\"Cube(Blue)\",\"Cube(Green)\",\"Cube(Red)\"],\"AIModelMetadata\":{\"id\":0,\"version\":1,\"name\":\"Classroom Objects\"},\"aiModelDropDownValue\":\"2024-2025 High Stakes\"}","isConfigured":"false"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","minVersion":"3.1.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}